// Code generated by "enumer"; DO NOT EDIT. 

package main

// IntState enum declarations
const (
	_IntStateName = "pending_asrunNingcompletedfailed"
	IntStatePendingAs IntState = iota
	IntStateRunNing
	IntStateCompleted
	IntStateFailed
)

var _IntStateNames = []string{
	_IntStateName[0:10],
	_IntStateName[10:17],
	_IntStateName[17:26],
	_IntStateName[26:32],
}

var _IntStateMap = map[string]IntState{
	_IntStateName[0:10]: IntStatePendingAs,
	_IntStateName[10:17]: IntStateRunNing,
	_IntStateName[17:26]: IntStateCompleted,
	_IntStateName[26:32]: IntStateFailed,
}

func IntStateNames() []string {
	return _IntStateNames
}

func IntStateFromString(value string) (IntState, bool) {
	enum, has := _IntStateMap[value]
	return enum, has
}

func (en IntState) IsValid() bool {
	return 0 < en && en <= 4
}

func IntStateValues() []IntState {
	return []IntState{
		IntStatePendingAs,
		IntStateRunNing,
		IntStateCompleted,
		IntStateFailed,
	}
}

func (en IntState) String() string { 
	return _IntStateNames[en]
}

// StrState enum declarations
const (
	StrStatePendingAs StrState = "pending_as"
	StrStateRunNing StrState = "runNing"
	StrStateCompleted StrState = "completed"
	StrStateFailed StrState = "failed"
)

func (en StrState) IsValid() bool {
	return en == StrStatePendingAs ||
		en == StrStateRunNing ||
		en == StrStateCompleted ||
		en == StrStateFailed
}

func StrStateValues() []StrState {
	return []StrState{
		StrStatePendingAs,
		StrStateRunNing,
		StrStateCompleted,
		StrStateFailed,
	}
}

func (en StrState) String() string { 
	return string(en)
}

// PandState enum declarations
const (
	_PandStateName = "pending_asrunNingcompletedfailed"
	PandStatePendingAs PandState = iota
	PandStateRunNing
	PandStateCompleted
	PandStateFailed
)

var _PandStateNames = []string{
	_PandStateName[0:10],
	_PandStateName[10:17],
	_PandStateName[17:26],
	_PandStateName[26:32],
}

var _PandStateMap = map[string]PandState{
	_PandStateName[0:10]: PandStatePendingAs,
	_PandStateName[10:17]: PandStateRunNing,
	_PandStateName[17:26]: PandStateCompleted,
	_PandStateName[26:32]: PandStateFailed,
}

func PandStateNames() []string {
	return _PandStateNames
}

func PandStateFromString(value string) (PandState, bool) {
	enum, has := _PandStateMap[value]
	return enum, has
}

func (en PandState) IsValid() bool {
	return 0 < en && en <= 4
}

func PandStateValues() []PandState {
	return []PandState{
		PandStatePendingAs,
		PandStateRunNing,
		PandStateCompleted,
		PandStateFailed,
	}
}

func (en PandState) String() string { 
	return _PandStateNames[en]
}

